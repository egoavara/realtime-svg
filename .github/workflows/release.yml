name: Release Docker Image and Binary

on:
  push:
    branches:
      - main
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'The release tag to build and publish (e.g., v1.0.0)'
        required: true

env:
  ASSET_NAME: realtime-svg
  BINARY_PATH: backend
  RELEASE_TAG: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag_name || github.event.release.tag_name }}

jobs:
  package-docker:
    name: Package Docker Images (linux/amd64, linux/arm64)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.RELEASE_TAG }}

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            type=raw,value=${{ env.RELEASE_TAG }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          cache-from: type=gha,scope=docker-cache
          cache-to: type=gha,mode=max,scope=docker-cache

      - name: Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          cache-from: type=gha,scope=docker-cache
          cache-to: type=gha,mode=max,scope=docker-cache
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-binaries:
    name: Build Binary (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    if: (github.event_name == 'workflow_dispatch' && startsWith(github.event.inputs.tag_name, 'v')) || (github.event_name == 'release' && startsWith(github.event.release.tag_name, 'v'))
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name_suffix: windows-amd64.exe
            asset_content_type: application/vnd.microsoft.portable-executable
            rustflags: ""
            needs_linker_install: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            asset_name_suffix: linux-musl-amd64
            asset_content_type: application/octet-stream
            needs_linker_install: true
            linker: musl-gcc
            linker_install_cmd: sudo apt-get update && sudo apt-get install -y musl-tools musl-dev
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            asset_name_suffix: linux-musl-arm64
            asset_content_type: application/octet-stream
            needs_linker_install: true
            zig_install: true
            linker_install_cmd: cargo install --locked cargo-zigbuild
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name_suffix: linux-gnu-amd64
            asset_content_type: application/octet-stream
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            asset_name_suffix: linux-gnu-arm64
            asset_content_type: application/octet-stream
            needs_linker_install: true
            linker: aarch64-linux-gnu-gcc
            linker_install_cmd: sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.RELEASE_TAG }}

      - name: Set up Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: "1.86.0"
          cache-key: "rust-${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}"
          target: ${{ matrix.target }}
          rustflags: ${{ matrix.rustflags }}

      - name: Install zig if needed
        if: matrix.zig_install
        uses: mlugg/setup-zig@v2

      - name: Install cross-linker if needed
        if: matrix.needs_linker_install
        run: ${{ matrix.linker_install_cmd }}
        shell: bash

      - name: Build (Windows MSVC)
        if: matrix.os == 'windows-latest'
        run: cargo build --release --target ${{ matrix.target }}

      - name: Build (Linux amd64 MUSL)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CC_x86_64_unknown_linux_musl: ${{ matrix.linker }}
          CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER: ${{ matrix.linker }}
          CFLAGS_x86_64_unknown_linux_musl: "-std=c11 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0"

      - name: Build (Linux arm64 MUSL)
        if: matrix.target == 'aarch64-unknown-linux-musl'
        run: cargo zigbuild --release --target ${{ matrix.target }}
        env:
          CFLAGS_aarch64_unknown_linux_musl: "-std=c11 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0"

      - name: Build (Linux amd64 GNU)
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: cargo build --release --target ${{ matrix.target }}

      - name: Build (Linux arm64 GNU)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CC_aarch64_unknown_linux_gnu: ${{ matrix.linker }}
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: ${{ matrix.linker }}

      - name: Upload Release Asset (using gh cli)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ASSET_PATH="./target/${{ matrix.target }}/release/${{ env.BINARY_PATH }}${{ endsWith(matrix.asset_name_suffix, '.exe') && '.exe' || '' }}"
          ASSET_NAME="${{ env.ASSET_NAME }}-${{ env.RELEASE_TAG }}-${{ matrix.asset_name_suffix }}"
          echo "Copying $ASSET_PATH to $ASSET_NAME for upload"
          cp "$ASSET_PATH" "$ASSET_NAME"
          echo "Uploading $ASSET_NAME to tag ${{ env.RELEASE_TAG }}"
          gh release upload "${{ env.RELEASE_TAG }}" "$ASSET_NAME" --clobber
        shell: bash

  package-helm:
    name: Package Helm Chart
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: (github.event_name == 'workflow_dispatch' && startsWith(github.event.inputs.tag_name, 'v')) || (github.event_name == 'release' && startsWith(github.event.release.tag_name, 'v'))
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.RELEASE_TAG }}

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Package Helm chart
        run: |
          helm package deploy/helm/realtime-svg -d .

      - name: Upload Helm chart to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ env.RELEASE_TAG }}"
          VERSION_NO_V="${VERSION#v}"
          CHART_FILE="realtime-svg-${VERSION_NO_V}.tgz"
          echo "Uploading $CHART_FILE to tag ${{ env.RELEASE_TAG }}"
          gh release upload "${{ env.RELEASE_TAG }}" "$CHART_FILE" --clobber

  package-pulumi:
    name: Package Pulumi Module
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: (github.event_name == 'workflow_dispatch' && startsWith(github.event.inputs.tag_name, 'v')) || (github.event_name == 'release' && startsWith(github.event.release.tag_name, 'v'))
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.RELEASE_TAG }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies and build
        run: |
          cd deploy/pulumi/realtime-svg
          npm install
          npm run build

      - name: Create npm package tarball
        run: |
          cd deploy/pulumi/realtime-svg
          npm pack

      - name: Upload Pulumi package to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ env.RELEASE_TAG }}"
          VERSION_NO_V="${VERSION#v}"
          cd deploy/pulumi/realtime-svg
          PACKAGE_FILE="realtime-svg-pulumi-${VERSION_NO_V}.tgz"
          mv realtime-svg-pulumi-${VERSION_NO_V}.tgz "$PACKAGE_FILE"
          echo "Uploading $PACKAGE_FILE to tag ${{ env.RELEASE_TAG }}"
          gh release upload "${{ env.RELEASE_TAG }}" "$PACKAGE_FILE" --clobber

  package-terraform:
    name: Package Terraform Module
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: (github.event_name == 'workflow_dispatch' && startsWith(github.event.inputs.tag_name, 'v')) || (github.event_name == 'release' && startsWith(github.event.release.tag_name, 'v'))
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.RELEASE_TAG }}

      - name: Create Terraform module archive
        run: |
          VERSION="${{ env.RELEASE_TAG }}"
          VERSION_NO_V="${VERSION#v}"
          cd deploy/terraform
          tar -czf "realtime-svg-terraform-${VERSION_NO_V}.tar.gz" realtime-svg/

      - name: Upload Terraform module to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ env.RELEASE_TAG }}"
          VERSION_NO_V="${VERSION#v}"
          cd deploy/terraform
          TERRAFORM_FILE="realtime-svg-terraform-${VERSION_NO_V}.tar.gz"
          echo "Uploading $TERRAFORM_FILE to tag ${{ env.RELEASE_TAG }}"
          gh release upload "${{ env.RELEASE_TAG }}" "$TERRAFORM_FILE" --clobber

  package-kubernetes:
    name: Package Kubernetes Manifests
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: (github.event_name == 'workflow_dispatch' && startsWith(github.event.inputs.tag_name, 'v')) || (github.event_name == 'release' && startsWith(github.event.release.tag_name, 'v'))
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.RELEASE_TAG }}

      - name: Upload Kubernetes install.yaml to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ env.RELEASE_TAG }}"
          VERSION_NO_V="${VERSION#v}"
          K8S_FILE="realtime-svg-kubernetes-${VERSION_NO_V}.yaml"
          cp deploy/kubernetes/realtime-svg/install.yaml "$K8S_FILE"
          echo "Uploading $K8S_FILE to tag ${{ env.RELEASE_TAG }}"
          gh release upload "${{ env.RELEASE_TAG }}" "$K8S_FILE" --clobber 